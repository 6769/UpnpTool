#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6


import sys
import threading
import tkinter as tk
from tkinter.constants import *
import logging
from typing import Optional

import upnpclient

from . import logic

_debug = True  # False to eliminate debug printing from callback functions.
logger = logging.getLogger(__name__)


def main(*args):
    '''Main entry point for the application.'''
    from . import smalltool1
    global root
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    logic.hdpi(root)
    _w1 = smalltool1.Toplevel1(_top1)
    logic.initgui(_w1)

    root.mainloop()


devices = []


@logic.protector
def query_devices(*args):
    logger.info('start query devices on LAN')

    # _w1.TButton_querydevice.config(state=DISABLED)
    @logic.protector
    def _inner():
        _w1.TButton_querydevice.configure(state=tk.DISABLED)

        try:
            global devices
            devices = upnpclient.discover()
            _w1.Scrolledlistbox_devices.delete(0, END)
            for device in devices:
                _w1.Scrolledlistbox_devices.insert(END, device.friendly_name)
                logger.info('device: %s, %s', device, device.device_name)
            logger.info('discover devices: %d', len(devices))
        except Exception as e:
            logger.error(e)
        finally:
            _w1.TButton_querydevice.configure(state=tk.NORMAL)

            # _w1.TButton_querydevice.config(state=NORMAL)

    t = threading.Thread(target=_inner)
    t.start()


@logic.protector
def add_portmap(*args):
    if _debug:
        print('smalltool1_support.add_portmap')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()
    d = _load_device()
    if not d:
        return

    r = d.WANIPConn1.AddPortMapping(
        NewRemoteHost=_w1.remotehostvar.get(),
        NewExternalPort=_w1.remoteportvar.get(),
        NewProtocol=_w1.comboboxtype.get(),
        NewInternalPort=_w1.localportvar.get(),
        NewInternalClient=_w1.localhostvar.get(),
        NewEnabled='1',
        NewPortMappingDescription=_w1.descriptvar.get(),
        NewLeaseDuration=_w1.timeoutvar.get())
    logger.debug('add port: %s', r)
    logger.info('端口映射添加成功')

    list_portmaps(*args)


@logic.protector
def delete_portmap(*args):
    if _debug:
        print('smalltool1_support.delete_portmap')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()
    d = _load_device()
    if not d:
        return
    cr = _w1.Scrolledlistbox_portmaps.curselection()
    if not cr:
        logger.warning('端口未选中！')
        return
    i = cr[0]
    v = d.WANIPConn1.GetGenericPortMappingEntry(NewPortMappingIndex=i)
    d.WANIPConn1.DeletePortMapping(**v)

    logger.info('refresh ports...')
    list_portmaps(*args)


def _load_device() -> Optional[upnpclient.upnp.Device]:
    """"""
    cr = _w1.Scrolledlistbox_devices.curselection()
    if not cr:
        logger.warning('设备未选中！')
        return
    logger.debug('device selected: %s', cr)
    d = devices[cr[0]]
    if not hasattr(d, 'WANIPConn1'):
        logger.error('不支持UPnP的设备，换一个吧')
        return
    return d


@logic.protector
def list_portmaps(*args):
    """

In [1]: d.WANIPConn1.GetGenericPortMappingEntry(NewPortMappingIndex=3)
Out[1]:
{'NewRemoteHost': None,
 'NewExternalPort': 54321,
 'NewProtocol': 'UDP',
 'NewInternalPort': 12345,
 'NewInternalClient': '192.168.1.2',
 'NewEnabled': True,
 'NewPortMappingDescription': 'MiniTP SDK',
 'NewLeaseDuration': 0}
    """
    if _debug:
        print('smalltool1_support.list_portmaps')
        for arg in args:
            print('    another arg:', arg)
        sys.stdout.flush()
    d = _load_device()
    if not d:
        return

    st = d.WANIPConn1.GetStatusInfo()
    nat = d.WANIPConn1.GetNATRSIPStatus()
    oip = d.WANIPConn1.GetExternalIPAddress()
    logger.info('GetStatusInfo: %s', st)
    logger.info('GetNATRSIPStatus: %s', nat)
    logger.info('GetExternalIPAddress: %s', oip)
    _w1.Scrolledlistbox_portmaps.delete(0, END)

    try:
        # 枚举更新端口映射列表
        for i in range(2 ** 16):
            v = d.WANIPConn1.GetGenericPortMappingEntry(NewPortMappingIndex=i)
            line = '[{NewPortMappingDescription}] {NewProtocol}://{NewInternalClient}:{NewInternalPort} <-> {NewExternalPort}'.format_map(
                v)
            _w1.Scrolledlistbox_portmaps.insert(END, line)
    except upnpclient.soap.SOAPError as e:
        pass


if __name__ == '__main__':
    import smalltool1

    logging.basicConfig(level=logging.DEBUG, datefmt='%Y-%m-%d %H:%M:%S',
                        format='%(asctime)s [%(levelname)s]:%(filename)s  %(message)s', )
    smalltool1.start_up()
