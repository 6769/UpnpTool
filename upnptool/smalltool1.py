#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Aug 22, 2023 11:10:38 PM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

from . import smalltool1_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("755x403+828+257")
        top.minsize(152, 1)
        top.maxsize(2052, 1133)
        top.resizable(1,  1)
        top.title("UPnP Manager")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top
        self.localhostvar = tk.StringVar()
        self.localportvar = tk.StringVar()
        self.remotehostvar = tk.StringVar()
        self.remoteportvar = tk.StringVar()
        self.timeoutvar = tk.StringVar()
        self.comboboxtype = tk.StringVar()
        self.descriptvar = tk.StringVar()

        _style_code()
        self.Scrolledtext_log = ScrolledText(self.top)
        self.Scrolledtext_log.place(relx=0.03, rely=0.737, relheight=0.226
                , relwidth=0.943)
        self.Scrolledtext_log.configure(background="white")
        self.Scrolledtext_log.configure(font="-family {Consolas} -size 9")
        self.Scrolledtext_log.configure(foreground="black")
        self.Scrolledtext_log.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext_log.configure(highlightcolor="black")
        self.Scrolledtext_log.configure(insertbackground="black")
        self.Scrolledtext_log.configure(insertborderwidth="3")
        self.Scrolledtext_log.configure(selectbackground="#c4c4c4")
        self.Scrolledtext_log.configure(selectforeground="black")
        self.Scrolledtext_log.configure(wrap="none")
        self.TFrame1 = ttk.Frame(self.top)
        self.TFrame1.place(relx=0.371, rely=0.025, relheight=0.697
                , relwidth=0.289)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")
        self.TButton_addportmap = ttk.Button(self.TFrame1)
        self.TButton_addportmap.place(relx=0.046, rely=0.854, height=27
                , width=187)
        self.TButton_addportmap.configure(command=smalltool1_support.add_portmap)
        self.TButton_addportmap.configure(takefocus="")
        self.TButton_addportmap.configure(text='''AddPortMap''')
        self.TButton_addportmap.configure(compound='left')
        self.TLabel1 = ttk.Label(self.TFrame1)
        self.TLabel1.place(relx=0.032, rely=0.036, height=36, width=85)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''LocalHost''')
        self.TLabel1.configure(compound='left')
        self.TEntry_localhost = ttk.Entry(self.TFrame1)
        self.TEntry_localhost.place(relx=0.413, rely=0.075, relheight=0.082
                , relwidth=0.56)
        self.TEntry_localhost.configure(textvariable=self.localhostvar)
        self.TEntry_localhost.configure(takefocus="")
        self.TEntry_localhost.configure(cursor="ibeam")
        self.TEntry_localhost_tooltip = \
        ToolTip(self.TEntry_localhost, '''device who use port''')

        self.TLabel2 = ttk.Label(self.TFrame1)
        self.TLabel2.place(relx=0.037, rely=0.146, height=36, width=75)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''LocalPort''')
        self.TLabel2.configure(compound='left')
        self.TLabel3 = ttk.Label(self.TFrame1)
        self.TLabel3.place(relx=0.032, rely=0.498, height=36, width=105)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''RemotePort''')
        self.TLabel3.configure(compound='left')
        self.TEntry_localport = ttk.Entry(self.TFrame1)
        self.TEntry_localport.place(relx=0.413, rely=0.178, relheight=0.085
                , relwidth=0.56)
        self.TEntry_localport.configure(textvariable=self.localportvar)
        self.TEntry_localport.configure(takefocus="")
        self.TEntry_localport.configure(cursor="fleur")
        self.TEntry_localport_tooltip = \
        ToolTip(self.TEntry_localport, '''1-65535''')

        self.TEntry_remotehost = ttk.Entry(self.TFrame1)
        self.TEntry_remotehost.place(relx=0.55, rely=0.427, relheight=0.082
                , relwidth=0.422)
        self.TEntry_remotehost.configure(textvariable=self.remotehostvar)
        self.TEntry_remotehost.configure(takefocus="")
        self.TEntry_remotehost.configure(cursor="fleur")
        self.TEntry_remotehost_tooltip = \
        ToolTip(self.TEntry_remotehost, '''route listening''')

        self.TLabel4 = ttk.Label(self.TFrame1)
        self.TLabel4.place(relx=0.037, rely=0.427, height=21, width=102)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''RemoteHost''')
        self.TLabel4.configure(compound='left')
        self.TEntry_remoteport = ttk.Entry(self.TFrame1)
        self.TEntry_remoteport.place(relx=0.55, rely=0.534, relheight=0.085
                , relwidth=0.422)
        self.TEntry_remoteport.configure(textvariable=self.remoteportvar)
        self.TEntry_remoteport.configure(takefocus="")
        self.TEntry_remoteport.configure(cursor="ibeam")
        self.TEntry_remoteport_tooltip = \
        ToolTip(self.TEntry_remoteport, '''1-65535''')

        self.TEntry_timeout = ttk.Entry(self.TFrame1)
        self.TEntry_timeout.place(relx=0.55, rely=0.641, relheight=0.085
                , relwidth=0.422)
        self.TEntry_timeout.configure(textvariable=self.timeoutvar)
        self.TEntry_timeout.configure(takefocus="")
        self.TEntry_timeout.configure(cursor="ibeam")
        self.TEntry_timeout_tooltip = \
        ToolTip(self.TEntry_timeout, '''â‰¥0''')

        self.TLabel5 = ttk.Label(self.TFrame1)
        self.TLabel5.place(relx=0.032, rely=0.605, height=32, width=71)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="TkDefaultFont")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Timeout''')
        self.TLabel5.configure(compound='left')
        self.TCombobox_type = ttk.Combobox(self.TFrame1)
        self.TCombobox_type.place(relx=0.413, rely=0.747, relheight=0.085
                , relwidth=0.56)
        self.value_list = ['TCP','UDP',]
        self.TCombobox_type.configure(values=self.value_list)
        self.TCombobox_type.configure(textvariable=self.comboboxtype)
        self.TCombobox_type.configure(takefocus="")
        self.TCombobox_type_tooltip = \
        ToolTip(self.TCombobox_type, '''select TCP/UDP''')

        self.TLabel6 = ttk.Label(self.TFrame1)
        self.TLabel6.place(relx=0.046, rely=0.712, height=31, width=51)
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''Type''')
        self.TLabel6.configure(compound='left')
        self.TEntry_description = ttk.Entry(self.TFrame1)
        self.TEntry_description.place(relx=0.413, rely=0.285, relheight=0.1
                , relwidth=0.56)
        self.TEntry_description.configure(textvariable=self.descriptvar)
        self.TEntry_description.configure(takefocus="")
        self.TEntry_description.configure(cursor="ibeam")
        self.TLabel7 = ttk.Label(self.TFrame1)
        self.TLabel7.place(relx=0.018, rely=0.285, height=21, width=83)
        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font="-family {Microsoft YaHei UI} -size 9")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='w')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''Description''')
        self.TLabel7.configure(compound='left')
        self.TFrame2 = ttk.Frame(self.top)
        self.TFrame2.place(relx=0.03, rely=0.025, relheight=0.697
                , relwidth=0.331)
        self.TFrame2.configure(relief='groove')
        self.TFrame2.configure(borderwidth="2")
        self.TFrame2.configure(relief="groove")
        self.TButton_querydevice = ttk.Button(self.TFrame2)
        self.TButton_querydevice.place(relx=0.048, rely=0.036, height=27
                , width=217)
        self.TButton_querydevice.configure(command=smalltool1_support.query_devices)
        self.TButton_querydevice.configure(takefocus="")
        self.TButton_querydevice.configure(text='''Query''')
        self.TButton_querydevice.configure(compound='left')
        self.Scrolledlistbox_devices = ScrolledListBox(self.TFrame2)
        self.Scrolledlistbox_devices.place(relx=0.04, rely=0.142, relheight=0.804
                , relwidth=0.884)
        self.Scrolledlistbox_devices.configure(background="white")
        self.Scrolledlistbox_devices.configure(cursor="xterm")
        self.Scrolledlistbox_devices.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox_devices.configure(font="TkFixedFont")
        self.Scrolledlistbox_devices.configure(foreground="black")
        self.Scrolledlistbox_devices.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox_devices.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox_devices.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox_devices.configure(selectforeground="black")
        self.TFrame3 = ttk.Frame(self.top)
        self.TFrame3.place(relx=0.67, rely=0.025, relheight=0.697
                , relwidth=0.302)
        self.TFrame3.configure(relief='groove')
        self.TFrame3.configure(borderwidth="2")
        self.TFrame3.configure(relief="groove")
        self.TButton_deleteport = ttk.Button(self.TFrame3)
        self.TButton_deleteport.place(relx=0.044, rely=0.854, height=27
                , width=197)
        self.TButton_deleteport.configure(command=smalltool1_support.delete_portmap)
        self.TButton_deleteport.configure(takefocus="")
        self.TButton_deleteport.configure(text='''DeletePortMap''')
        self.TButton_deleteport.configure(compound='left')
        self.Scrolledlistbox_portmaps = ScrolledListBox(self.TFrame3, selectmode=MULTIPLE)
        self.Scrolledlistbox_portmaps.place(relx=0.066, rely=0.142
                , relheight=0.69, relwidth=0.851)
        self.Scrolledlistbox_portmaps.configure(background="white")
        self.Scrolledlistbox_portmaps.configure(cursor="xterm")
        self.Scrolledlistbox_portmaps.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox_portmaps.configure(font="TkFixedFont")
        self.Scrolledlistbox_portmaps.configure(foreground="black")
        self.Scrolledlistbox_portmaps.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox_portmaps.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox_portmaps.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox_portmaps.configure(selectforeground="black")
        self.TButton_queryport = ttk.Button(self.TFrame3)
        self.TButton_queryport.place(relx=0.066, rely=0.036, height=27
                , width=187)
        self.TButton_queryport.configure(command=smalltool1_support.list_portmaps)
        self.TButton_queryport.configure(takefocus="")
        self.TButton_queryport.configure(text='''ListPortMap''')
        self.TButton_queryport.configure(compound='left')

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    smalltool1_support.main()

if __name__ == '__main__':
    smalltool1_support.main()




